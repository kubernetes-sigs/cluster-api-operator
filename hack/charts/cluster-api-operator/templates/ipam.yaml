# IPAM providers
{{- range $name, $ipam := $.Values.ipam }}
  {{- $ipamNamespace := default ( printf "%s-%s" $name "ipam-system" ) (get $ipam "namespace") }}
  {{- $ipamName := $name }}
  {{- $ipamVersion := get $ipam "version" }}
{{- if ne $ipam.createNamespace false }}
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    {{- if $.Values.enableHelmHook }}
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "1"
    {{- end }}
    "argocd.argoproj.io/sync-wave": "1"
  name: {{ $ipamNamespace }}
{{- end }}
---
apiVersion: operator.cluster.x-k8s.io/v1alpha2
kind: IPAMProvider
metadata:
  name: {{ $ipamName }}
  namespace: {{ $ipamNamespace }}
  annotations:
    {{- if $.Values.enableHelmHook }}
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "2"
    {{- end }}
    "argocd.argoproj.io/sync-wave": "2"
{{- if or $ipamVersion $.Values.configSecret.name $ipam.manager $.Values.additionalDeployments (($ipam).configSecret).name }}
spec:
{{- end }}
{{- if $ipamVersion }}
  version: {{ $ipamVersion }}
{{- end }}
{{- if $ipam.manager }}
  manager:
  {{- if $ipam.manager.featureGates }}
    featureGates:
    {{- range $key, $value := $ipam.manager.featureGates }}
      {{ $key }}: {{ $value }}
    {{- end }}
  {{- end }}
  {{- if $ipam.manager.metrics }}
    metrics:
    {{- if $ipam.manager.metrics.insecureDiagnostics }}
      insecureDiagnostics: {{- $ipam.manager.metrics.insecureDiagnostics }}
    {{- end }}
    {{- if $ipam.manager.metrics.diagnosticsAddress }}
      diagnosticsAddress: {{- $ipam.manager.metrics.diagnosticsAddress }}
    {{- end }}
  {{- end }}
{{- end }}
{{- if and (kindIs "map" $.Values.fetchConfig) (hasKey $.Values.fetchConfig $ipamName) }}
{{- range $key, $value := $.Values.fetchConfig }}
  {{- if eq $key $ipamName }}
  fetchConfig:
    {{- range $k, $v := $value }}
      {{ $k }}: {{ $v }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}
{{- if (default (($ipam).configSecret).name (($.Values).configSecret).name) }}
{{- include "capi-operator.configSecret" (dict "ROOT" $ "ARGUMENT" $ipam) | nindent 2 }}
{{- end }}
{{- if $ipam.manifestPatches }}
  manifestPatches: {{ toYaml $ipam.manifestPatches | nindent 4 }}
{{- end }}
{{- if $ipam.fetchConfig }}
  fetchConfig: {{ toYaml $ipam.fetchConfig | nindent 4 }}
{{- end }}
{{- if $.Values.additionalDeployments }}
  additionalDeployments: {{ toYaml $.Values.additionalDeployments | nindent 4 }}
{{- end }}
{{- if $ipam.additionalManifests }}
  additionalManifests:
    name: {{ $ipam.additionalManifests.name }}
    {{- if $ipam.additionalManifests.namespace }}
    namespace: {{ $ipam.additionalManifests.namespace }}
    {{- end }} {{/* if $ipam.additionalManifests.namespace */}}
{{- end }}
{{- if $ipam.additionalManifests }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $ipam.additionalManifests.name }}
  namespace: {{ default $ipamNamespace $ipam.additionalManifests.namespace }}
data:
  manifests: {{- toYaml $ipam.additionalManifests.manifests | nindent 4 }}
{{- end }}
{{- end }} {{/* range $name, $ipam := .Values.ipam */}}
